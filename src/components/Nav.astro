---
import LangSelect from "./LangSelect.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
const home = getRelativeLocaleUrl("fr", "/");
---

<nav class="nav-main glass">
  <div class="liquidGlass-effect"></div>
  <div class="liquidGlass-tint"></div>
  <div class="liquidGlass-shine"></div>
  <div class="grid contenido">
    <div id="menu">
      <div class="logo">Aqui el logo</div>

      <button class="hamburger" aria-label="Menu">
        <span></span>
        <span></span>
        <span></span>
      </button>

      <div class="nav-content">
        <ul>
          <li>
            <a href={home}>Home</a>
          </li>
          <li>
            <a href="/about">About</a>
          </li>
          <li>
            <a href="/contact">Contact</a>
          </li>
        </ul>
        <div class="selector">
          <LangSelect />
        </div>
      </div>
    </div>
  </div>
</nav>
<div id="margenNav"></div>

  <svg style="display: none">
      <filter
        id="glass-distortion"
        x="0%"
        y="0%"
        width="100%"
        height="100%"
        filterUnits="objectBoundingBox"
      >
        <feTurbulence
          type="fractalNoise"
          baseFrequency="0 0.01"
          numOctaves="1"
          seed="5"
          result="turbulence"
        />
        <!-- Seeds: 14, 17,  -->

        <feComponentTransfer in="turbulence" result="mapped">
          <feFuncR type="gamma" amplitude="1" exponent="10" offset="0.5" />
          <feFuncG type="gamma" amplitude="0" exponent="1" offset="0" />
          <feFuncB type="gamma" amplitude="0" exponent="1" offset="0.5" />
        </feComponentTransfer>

        <feGaussianBlur in="turbulence" stdDeviation="3" result="softMap" />

        <feSpecularLighting
          in="softMap"
          surfaceScale="5"
          specularConstant="1"
          specularExponent="100"
          lighting-color="white"
          result="specLight"
        >
          <fePointLight x="-200" y="-200" z="300" />
        </feSpecularLighting>

        <feComposite
          in="specLight"
          operator="arithmetic"
          k1="0"
          k2="1"
          k3="1"
          k4="0"
          result="litImage"
        />

        <feDisplacementMap
          in="SourceGraphic"
          in2="softMap"
          scale="150"
          xChannelSelector="R"
          yChannelSelector="G"
        />
      </filter>
    </svg>


<svg style="display: none">
  <filter
    id="filter"
    color-interpolation-filters="linearRGB"
    filterUnits="objectBoundingBox"
    primitiveUnits="userSpaceOnUse"
  >

    <feDisplacementMap
      in="SourceGraphic"
      in2="SourceGraphic"
      scale="10"
      xChannelSelector="R"
      yChannelSelector="B"
      x="0%"
      y="0%"
      width="100%"
      height="100%"
      result="displacementMap"></feDisplacementMap>
      
    <feGaussianBlur
      stdDeviation="3 3"
      x="0%"
      y="0%"
      width="100%"
      height="100%"
      in="displacementMap"
      edgeMode="none"
      result="blur"></feGaussianBlur>
    <feGaussianBlur in="turbulence" stdDeviation="3" result="softMap"
    ></feGaussianBlur>
   
  </filter>
</svg>

<style lang="scss">
  @use "../styles/variables.scss" as *;
  #margenNav {
    margin-bottom: 2rem;
    @include cel {
      margin-bottom: 5rem;
    }
  }

  .nav-main {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background-color: hsla(0, 0%, 92%, 0.2);
    padding: 1rem 0;
    transition: transform 0.3s ease;
    z-index: 1000;
    border-radius: 0.8rem;
    margin: 0.3rem;
  }

  #menu {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    position: relative;
    z-index: 4;
  }

  .logo {
    z-index: 2;
  }

  .nav-content {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  ul {
    list-style: none;
    display: flex;
    gap: 1rem;
    margin: 0;
    padding: 0;
    li {
      list-style: none;
    }
  }

  nav a {
    text-decoration: none;
    color: #333;
    font-weight: bold;
    transition: color 0.3s ease;

    &:hover {
      color: #0066cc;
    }
  }

  .hamburger {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    z-index: 2;
    position: relative;
    right: 20px;

    span {
      display: block;
      width: 28px;
      height: 2px;
      background-color: $acento;
      margin: 5px 0;
      transition: all 0.3s ease;
      border-radius: 3px;
    }
  }

  @include cel {
    .hamburger {
      display: block;
    }

    #menu {
      .nav-content {
        position: fixed;
        top: 0;
        right: -100%;
        width: 100%;
        height: 100vh;
        background-color: #f8f9fa;
        flex-direction: column;
        justify-content: center;
        padding: 2rem;
        transition: right 0.5s ease;

        &.active {
          right: 0;
        }
      }
    }

    ul {
      flex-direction: column;
      align-items: center;
      width: 100%;

      li {
        width: 100%;
        text-align: center;
      }

      a {
        display: block;
        padding: 1rem 0;
        border-bottom: 1px solid #eee;
      }
    }

    .selector {
      margin-top: 2rem;
    }

    // Hamburger animation
    .hamburger.active {
      span {
        &:first-child {
          transform: rotate(45deg) translate(5px, 5px);
          background-color: $primario;
        }
        &:nth-child(2) {
          opacity: 0;
        }
        &:last-child {
          transform: rotate(-45deg) translate(5px, -5px);
          background-color: $primario;
        }
      }
    }
  }

  //efecto vidrio

  .glass {
    overflow: hidden;
    box-shadow:
      0 6px 6px rgba(0, 0, 0, 0.2),
      0 0 20px rgba(0, 0, 0, 0.1);
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 2.2);
  }
  .liquidGlass-effect {
    position: absolute;
    z-index: 0;
    inset: 0;
    backdrop-filter: blur(7px);
    //filter: url(#filter);
    filter: url(#glass-distortion);
    overflow: hidden;
    isolation: isolate;
  }

  .liquidGlass-tint {
    z-index: 1;
    position: absolute;
    inset: 0;
    background: rgba(255, 255, 255, 0.25);
  }

  .liquidGlass-shine {
    position: absolute;
    inset: 0;
    z-index: 2;
    overflow: hidden;
    box-shadow:
      inset 2px 2px 4px 0px rgba(255, 255, 255, 0.5),
      inset -1px -1px 4px 1px rgba(255, 255, 255, 0.5);
  }
</style>

<script>
  // Variables
  let lastScroll = 0;
  const nav = document.querySelector(".nav-main");
  const hamburger = document.querySelector(".hamburger");
  const navContent = document.querySelector(".nav-content");
  const menuLinks = document.querySelectorAll("#menu a");

  // Toggle menu
  function toggleMenu() {
    hamburger?.classList.toggle("active");
    navContent?.classList.toggle("active");
    document.body.style.overflow = navContent?.classList.contains("active")
      ? "hidden"
      : "";
  }

  // Hide/Show nav on scroll
  function handleScroll() {
    const currentScroll = window.scrollY;

    if (currentScroll > lastScroll && currentScroll > 100) {
      // Scrolling down - hide nav
      (nav as HTMLElement)?.style.setProperty("transform", "translateY(-100%)");
    } else {
      // Scrolling up - show nav
      (nav as HTMLElement)?.style.setProperty("transform", "translateY(0)");
    }

    lastScroll = currentScroll;
  }

  // Event Listeners
  hamburger?.addEventListener("click", toggleMenu);

  // Close menu when clicking a link
  menuLinks.forEach((link) => {
    link.addEventListener("click", () => {
      if (navContent?.classList.contains("active")) {
        toggleMenu();
      }
    });
  });

  // Throttle scroll event
  let ticking = false;
  window.addEventListener("scroll", () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        handleScroll();
        ticking = false;
      });
      ticking = true;
    }
  });
</script>

---
interface Props {
  /** Duration of the loading animation in milliseconds */
  duration?: number;
  /** Text to display inside the loader */
  loadingText?: string;
}

const { 
  duration = 3000, 
  loadingText = 'Loading...' 
} = Astro.props;
---

<div class="loader-wrapper">
  <div class="loader-container">
    <div class="loader">
      <div class="loader-progress">
        <div class="loader-progress-bar"></div>
      </div>
      <div class="loader-percentage" aria-live="polite">0%</div>
    </div>
    {loadingText && <p class="loader-text">{loadingText}</p>}
  </div>
</div>

<style is:global>
  .loader-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    display: grid;
    place-items: center;
    background-color: rgba(255, 255, 255, 0.9);
    z-index: 9999;
    backdrop-filter: blur(5px);
    transition: opacity 0.5s ease-out, visibility 0.5s ease-out;
  }

  .loader-container {
    text-align: center;
    width: min(90%, 400px);
  }

  .loader {
    position: relative;
    width: 100%;
    margin-bottom: 1rem;
  }

  .loader-progress {
    width: 100%;
    height: 6px;
    background-color: #e9ecef;
    border-radius: 3px;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .loader-progress-bar {
    height: 100%;
    width: 0;
    background: linear-gradient(90deg, #0059ff, #00a3ff);
    border-radius: 3px;
    transition: width 0.3s ease-out;
    animation: progress ${duration}ms ease-in-out forwards;
  }

  .loader-percentage {
    font-size: 1.5rem;
    font-weight: 600;
    color: #212529;
    margin-bottom: 0.5rem;
  }

  .loader-text {
    color: #6c757d;
    font-size: 1.1rem;
    margin: 0;
    animation: fadeIn 0.5s ease-out;
  }

  @keyframes progress {
    0% { width: 0%; }
    100% { width: 100%; }
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

<script define:vars={{ duration }}>
  // Update percentage counter
  const progressBar = document.querySelector('.loader-progress-bar');
  const percentageElement = document.querySelector('.loader-percentage');
  const loaderWrapper = document.querySelector('.loader-wrapper');
  
  if (progressBar && percentageElement && loaderWrapper) {
    let progress = 0;
    const interval = 30; // Update interval in ms
    const increment = (interval / duration) * 100;
    
    const updateProgress = () => {
      if (progress < 100) {
        progress += increment;
        const roundedProgress = Math.min(Math.round(progress), 100);
        percentageElement.textContent = `${roundedProgress}%`;
        progressBar.style.width = `${roundedProgress}%`;
        requestAnimationFrame(updateProgress);
      } else {
        // When progress reaches 100%, hide the loader
        loaderWrapper.style.opacity = '0';
        loaderWrapper.style.visibility = 'hidden';
        // Optional: Remove the loader from the DOM after the fade out
        setTimeout(() => {
          loaderWrapper.remove();
        }, 500); // Match this with the transition duration
      }
    };
    
    // Start animation
    requestAnimationFrame(updateProgress);
  }
</script>